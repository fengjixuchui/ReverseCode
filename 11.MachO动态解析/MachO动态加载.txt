然后在两个NSLog都打上断点，运行。
程序断住之后，调节成汇编模式Debug --> Debug Workflow --> Always Show Disassembly，然后会切换到下面的视图


留意到symbol stub for: NSLog 这句，这句就是跳转到NSLog的stub实现imp___stubs__NSLog
我们先用image list命令来获取模块的基地址


[  0] 612400A7-6AEC-3714-842C-F83B079272BE 0x0000000100060000 /Users/apple/Library/Developer/Xcode/DerivedData/MachO的动态链接-dyjjhckpseuoonetiqiafxmmlsak/Build/Products/Debug-iphoneos/MachO的动态链接.app/MachO的动态链接 


0x0000000100060000 是这次运行时模块的基地址，因为iOS有ASLR，每次都会随机装到内存，随机只是偏移，并不是打乱，所以程序运行时候的及地址为:静态的基地址 + ASLR偏移，静态的基地址可以使用machOview来查看

静态基地址 = 0000000100000000；
所以这次运行的偏移地址ASLR偏移 = 0x0000000100060000 - 0000000100000000 = 0x60000

回到刚刚的bl 0x1000e2560 ; symbol stub for: NSLog，我们可以去看看这个地址里面究竟是什么代码，先求出它对应的 静态地址=运行时地址-ASLR偏移 = 0x100066554 - 0x60000 = 0x100006554。然后用hopper打开，跳转到该地址，如下

                     imp___stubs__NSLog:
0000000100006554         nop                                                    ; CODE XREF=-[ViewController viewDidLoad]+72, -[ViewController viewDidLoad]+84
0000000100006558         ldr        x16, #0x100008008
000000010000655c         br         x16


这三句代码是取值之后跳转，先看看#0x100008008的值，单击点进去。这里有个坑，如果你用hopper导入的时候选择了Resolve Lazy Binding，那么这个地址会解析成了符号。所以导入的时候不要选，那么可以看到这个地址的值如下：
0000000100008008         dq         0x00000001000065fc                          ; DATA XREF=imp___stubs__NSLog+4

所以上面的三句汇编的意思是跳转0x00000001000065fc这个地址，然后我们再切到这个地址看看。
00000001000065fc         ldr        w16, #0x100006604                           ; DATA XREF=_NSLog_ptr
0000000100006600         b          0x1000065e4
0000000100006604         db  0x00 ; '.'                                         ; DATA XREF=sub_1000065fc
0000000100006605         db  0x00 ; '.'
0000000100006606         db  0x00 ; '.'
0000000100006607         db  0x00 ; '.'
在这里压入一个参数之后，继续跳转到 0x1000065e4执行，继续跟入到这里，终于找到了stub_helper的调用。

继续执行，到第二次进入NSLog，然后你会发现0x1000e2560处的执行代码变成了下面的，这里其仍然是取的静态地址0x100008008处的值，只不过这个值已经变成了0x000000018248e598

我们可以打印一下静态地址0x100050228对应的动态地址0x1000e2560+ 0x60000 = 0x100068008，确实已经变成了0x000000018248e598

0x100068008: 98 e5 48 82 01 00 00 00 98 e5 47 82 01 00 00 00  ..H.......G.....
0x100068018: 60 70 c2 87 01 00 00 00 14 66 06 00 01 00 00 00  `p.......f......


然后进入0x18248e598这个地址，你会发现这里就是NSLog的函数入口

Foundation`NSLog:
->  0x18248e598 <+0>:  sub    sp, sp, #0x20             ; =0x20 
    0x18248e59c <+4>:  stp    x29, x30, [sp, #0x10]
    0x18248e5a0 <+8>:  add    x29, sp, #0x10            ; =0x10 
    0x18248e5a4 <+12>: add    x8, x29, #0x10            ; =0x10 
    0x18248e5a8 <+16>: str    x8, [sp, #0x8]
    0x18248e5ac <+20>: add    x1, x29, #0x10            ; =0x10 
    0x18248e5b0 <+24>: mov    x2, x30
    0x18248e5b4 <+28>: bl     0x1825673c0               ; _NSLogv
    0x18248e5b8 <+32>: ldp    x29, x30, [sp, #0x10]
    0x18248e5bc <+36>: add    sp, sp, #0x20             ; =0x20 
    0x18248e5c0 <+40>: ret    


附上刚刚image list的另外一个模块，你会发现0x000000018248e598这个地址已经是另外模块的了。
[  2] 73FF2B76-D90F-3C90-B010-8F6E36E3B71F 0x000000018247c000 /Users/apple/Library/Developer/Xcode/iOS DeviceSupport/10.3.1 (14E304)/Symbols/System/Library/Frameworks/Foundation.framework/Foundation 


这个就是MachO的懒加载符号表的加载过程。第一次调用的时候是指向stub_helper，调用完一次之后，就会修改懒加载符号指针，让其指向真正的函数地址，以后就可以直接跳转。

